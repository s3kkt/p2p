---
- name: gather facts
  setup: filter=ansible_distribution*

- name: merge top-level and env-level user_list
  set_fact:
    user_list: "{{ user_list + env_user_list }}"

# setup a list of allowed users, based on:
# 1) top-level variable "everywhere_allowed_users"
# 2) host-level variable "host_allowed_users"
# 3) group-level variable "group_allowed_users"
- name: setup a list of allowed users
  set_fact:
    allowed_users: "{{ allowed_users | default([]) + [item.name] }}"
  with_items:
  - "{{ group_list_users }}"
  - "{{ host_list_users }}"
  - "{{ everywhere_allowed_users }}"
  - "{{ env_all_allowed_users }}"

- name: setup a new list with user parameters based only on allowed users
  set_fact:
    users_filtered: "{{ user_list | selectattr('name', 'match', allowed_users | join('|')) | list }}"

- name: merge users properties top-level + env-level
  set_fact:
    users_combined_top_env: "{{ users_filtered | merge_users(env_all_allowed_users) }}"

- name: merge users properties (top-level,env-level) + group-level
  set_fact:
    users_combined_top_group: "{{ users_combined_top_env | merge_users(group_list_users) }}"

- name: merge users properties (top-level,env-level,group-level) + host-level
  set_fact:
    users_combined: "{{ users_combined_top_group | merge_users(host_list_users) }}"

- name: manage group
  group:
    gid: "{{ item.gid | default(omit) }}"
    name: "{{ item.name }}"
    state: "{{ item.state | default('present') }}"
    system: "{{ item.system | default('no') }}"
  with_items:
  - "{{ group_list | default([]) }}"
  - "{{ group_list_host | default([]) }}"
  - "{{ group_list_group | default([]) }}"

- name: manage user
  user:
    append: "{{ item.append | default(user_append) }}"
    comment: "{{ item.comment | default(omit) }}"
    createhome: "{{ item.createhome | default('yes') }}"
    expires: "{{ item.expires | default(omit) }}"
    force: "{{ item.force | default(user_force) }}"
    group: "{{ item.group | default(omit) }}"
    groups: "{{ item.groups|join(',') if item.groups is defined else omit }}"
    home: "{{ item.home | default(omit) }}"
    login_class: "{{ item.login_class | default(omit) }}"
    move_home: "{{ item.move_home | default(user_move_home) }}"
    name: "{{ item.name_override | default(item.name) }}"
    non_unique: "{{ item.non_unique | default(user_none_unique) }}"
    password: "{{ item.password_hash | default(omit) }}"
    remove: "{{ item.remove | default(user_remove) }}"
    shell: "{{ item.shell | default('/bin/bash') }}"
    state: "{{ item.state | default('present') }}"
    system: "{{ item.system | default(user_system) }}"
    uid: "{{ item.uid | default(omit) }}"
    update_password: "{{ item.update_password | default(user_update_password) }}"
  loop: "{{ users_combined | flatten(levels=1) }}"
  loop_control:
    label: "{{ item.name }}"

- name: set up multiple authorized keys
  authorized_key:
    user: "{{ item.name_override | default(item.name) }}"
    state: present
    key: |
      {% if item.keys_list is defined %}
      {% set setup_keys = item.keys_list %}
      {% else %}
      {% set setup_keys = ['main'] %}
      {% endif %}
      {% set keys_list=[] %}
      {%- for key in item.ssh_keys %}
      {% if key.name in setup_keys %}
      {{ keys_list.append(key) }}
      {% endif %}
      {%- endfor %}
      {% for key in keys_list %}
      {{ key.type }} {{ key.value }}{%- if key.comment is defined %} {{ key.comment }}{%- endif %}
      {% endfor %}
  loop: "{{ users_combined | flatten(levels=1) }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.ssh_keys is defined
  failed_when:
    - authorized_key_result.msg is defined
    - authorized_key_result.msg is not match('Failed to lookup user')

- name: setup users bashrc
  when: item.bashrc is defined
  copy:
    content: "{{ item.bashrc }}"
    dest: "/home/{{ item.name }}/.bashrc"
  loop: "{{ users_combined | flatten(levels=1) }}"
  loop_control:
    label: "{{ item.name }}"

- name: ensure sudo package
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  apt:
    name: sudo
    state: present

- name: ensure sudoers files
  copy:
    content: "{{ item.value }}"
    dest: "/etc/sudoers.d/{{ item.name }}"
    mode: 0440
    validate: /usr/sbin/visudo -csf %s
  with_items: "{{ users_management_sudoers }}"

- name: manage sudoers.d
  when: not users_management_remove_unmanaged_sudoers
  block:
  - name: get files in sudoers.d dir
    shell: ls -1 /etc/sudoers.d
    register: confd_existing_files
    changed_when: false

  - name: get sudoers prometheus names
    set_fact:
      confd_files: "{% set list=[] %}{% for prometheus in users_management_sudoers %}{{ list.append(prometheus.name) }}{% endfor %}{{ list }}"

  - name: remove unmanaged sudoers configs
    file:
      path: "/etc/sudoers.d/{{ item }}"
      state: absent
    with_items: "{{ confd_existing_files.stdout_lines }}"
    when: item not in confd_files
